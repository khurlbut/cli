# syntax = docker/dockerfile:1-experimental

# This version uses '--mount' instead of COPY when pulling files from a base image.
# Notice the COPY's commented out and the new "--mount=target=." things.
# Sweet! This is super-fast!

FROM --platform=${BUILDPLATFORM} golang:1.15.0-alpine AS base

# For some strange reason I need this. However, the original source
# works without adding build-base. Perhaps I will understand this some day.
RUN apk add build-base

WORKDIR /src
ENV GO_ENABLED=0
COPY go.* .
RUN go mod download
# COPY . .

FROM base AS build
ARG TARGETOS
ARG TARGETARCH
RUN --mount=target=. \
    --mount=type=cache,target=/root/.cache/go-build \
  GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -o /out/example .

FROM base AS unit-test
RUN --mount=target=. \
    --mount=type=cache,target=/root/.cache/go-build \
    mkdir /out && go test -v -coverprofile=/out/cover.out ./...

FROM golangci/golangci-lint:v1.27-alpine AS lint-base

FROM base AS lint
# COPY --from=lint-base /usr/bin/golangci-lint /usr/bin/golangci-lint
RUN --mount=target=. \
    --mount=from=lint-base,src=/usr/bin/golangci-lint,target=/usr/bin/golangci-lint \
    --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/root/.cache/golangci-lint \
  golangci-lint run --timeout 10m0s ./...

FROM scratch AS unit-test-coverage
COPY --from=unit-test /out/cover.out /cover.out

FROM scratch AS bin-unix
COPY --from=build /out/example /

FROM bin-unix AS bin-linux
FROM bin-unix AS bin-darwin

FROM scratch AS bin-windows
COPY --from=build /out/example /example.exe

FROM bin-${TARGETOS} as bin

